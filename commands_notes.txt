######### Tips to use Python Netmiko #########
from netmiko import Netmiko

my_devices_dict = {
    "host": "router_name",
    "username": "User ID",
    "password": "device password"
    "device_type": "cisco_nxos", #Use dir(netmiko) to find supported vendors.
    "global_delay_factor": 5 #Use global_delay_factor to set delay (in second) at the global level.
}

net_connect = Netmiko(**my_devices_dict)
'''Always use ** in front of my_devices_dict so Python will run through all the elements in my_devices_dict dictionary.'''

output = net_connect.send_command("show", expect_string=r"")
'''Use the expect_string argument when the router/device gives a different trailing ouput.'''

output = net_connect.send_command("write mem", delay_factor=5)
'''Use delay_factor in seconds for timing of the commands that take longer than 1 second to run.'''

output = net_connect.send_command_timing("clear ip arp")
'''Use send_command_timing() for commands that require additional user input.'''

output = net_connect.send_command("show ip route", use_textfsm=True)
'''Export the show ip route output to TextFSM template (list). To use TextFSM, (1) Git clone ntc-templates from Github, (2) Make sure the Python program is in the same directory as ntc-templates for it to work. (3) Check ntc-templates index.txt file for supported show commands.'''

output = net_connect.send_config_set(commands)
'''Use send_config_set() to send 1 string command or a list of commands. send_config_set will ouput the commands that you entered.'''

output = net_connect.commit()
'''Use net_connect.commit() after the send_config_set() to save router configuration. Use case fo Juniper, NXOS.'''

output = net_connect.send_config_from_file("commands.txt")
'''Use the commands from the file.'''

import logging
logging.basicConfig(filename="test.log", level=logging.DEBUG)
logger = logging.getLogger("netmiko")
'''Turn on longging to troubleshoot issue from Netmiko. Use .write_channel("show version\n") and .read_channel() as your own operations.'''

